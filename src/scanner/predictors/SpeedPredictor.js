/**
 * üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –±—É–¥—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
 */
export class SpeedPredictor {
  // –ü—Ä–æ—Å—Ç–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
  static forecast(history, alpha = 0.3) {
    if (!history || history.length === 0) return 5000;
    if (history.length === 1) return history[0];
    
    let forecast = history[0];
    for (let i = 1; i < history.length; i++) {
      forecast = alpha * history[i] + (1 - alpha) * forecast;
    }
    return Math.max(100, Math.min(10000, forecast)); // clamp
  }

  // –ü—Ä–æ–≥–Ω–æ–∑ uptime (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –ø—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç)
  static uptimeProbability(failures, totalChecks, minutesAhead = 10) {
    const baseReliability = totalChecks > 0 ? (totalChecks - failures) / totalChecks : 0.5;
    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø–∞–¥ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    return Math.max(0.1, baseReliability * Math.exp(-minutesAhead / 60));
  }
}